#!/usr/bin/env python
# -*- coding: utf-8 -*-

from flask import Flask, render_template, request, jsonify, redirect, url_for, session
from flask_cors import CORS
import os
import json
import subprocess
import requests
import pandas as pd
import pymysql
import pyodbc
from sqlalchemy import create_engine, text
from functools import lru_cache
import time
import re
from werkzeug.security import generate_password_hash, check_password_hash
from dotenv import load_dotenv

# بارگذاری متغیرهای محیطی
load_dotenv()

app = Flask(__name__)
CORS(app)
app.secret_key = os.environ.get('SECRET_KEY', 'xray_global_default_secret_key')

# تنظیمات مسیر پنتاهو
PENTAHO_SERVER_PATH = os.environ.get('PENTAHO_SERVER_PATH', 'e:/Repsitory/Pentaho/pentaho-server')
PENTAHO_URL = os.environ.get('PENTAHO_URL', 'http://localhost:8080/pentaho')

# مدیریت کاربران (در یک محیط واقعی از دیتابیس استفاده شود)
USERS = {
    'admin': {
        'password': generate_password_hash('admin'),
        'role': 'admin',
        'display_name': 'مدیر سیستم'
    },
    'user': {
        'password': generate_password_hash('user'),
        'role': 'user',
        'display_name': 'کاربر عادی'
    }
}

# تنظیمات اتصال به دیتابیس
def get_mysql_connection():
    """اتصال به دیتابیس MySQL با استفاده از پارامترهای محیطی"""
    try:
        connection = pymysql.connect(
            host=os.environ.get('MYSQL_HOST', 'localhost'),
            user=os.environ.get('MYSQL_USER', 'root'),
            password=os.environ.get('MYSQL_PASSWORD', ''),
            database=os.environ.get('MYSQL_DB', 'xray_global'),
            charset='utf8mb4',
            cursorclass=pymysql.cursors.DictCursor
        )
        return connection
    except Exception as e:
        print(f"خطا در اتصال به MySQL: {e}")
        return None

def get_sqlserver_connection():
    """اتصال به دیتابیس SQL Server با استفاده از پارامترهای محیطی"""
    try:
        connection_string = f"DRIVER={{ODBC Driver 17 for SQL Server}};"
        connection_string += f"SERVER={os.environ.get('SQLSERVER_HOST', 'localhost')};"
        connection_string += f"DATABASE={os.environ.get('SQLSERVER_DB', 'xray_global')};"
        connection_string += f"UID={os.environ.get('SQLSERVER_USER', 'sa')};"
        connection_string += f"PWD={os.environ.get('SQLSERVER_PASSWORD', 'your_password')};"
        
        connection = pyodbc.connect(connection_string)
        return connection
    except Exception as e:
        print(f"خطا در اتصال به SQL Server: {e}")
        return None

# ایجاد پیشرفته SQLAlchemy برای بهینه‌سازی کوئری‌های سنگین
def get_sqlalchemy_engine(db_type='mysql'):
    """ایجاد موتور SQLAlchemy برای عملکرد بهتر در کوئری‌های سنگین"""
    try:
        if db_type == 'mysql':
            connection_string = (
                f"mysql+pymysql://{os.environ.get('MYSQL_USER', 'root')}:"
                f"{os.environ.get('MYSQL_PASSWORD', '')}@"
                f"{os.environ.get('MYSQL_HOST', 'localhost')}/"
                f"{os.environ.get('MYSQL_DB', 'xray_global')}?charset=utf8mb4"
            )
        elif db_type == 'sqlserver':
            connection_string = (
                f"mssql+pyodbc://{os.environ.get('SQLSERVER_USER', 'sa')}:"
                f"{os.environ.get('SQLSERVER_PASSWORD', 'your_password')}@"
                f"{os.environ.get('SQLSERVER_HOST', 'localhost')}/"
                f"{os.environ.get('SQLSERVER_DB', 'xray_global')}?"
                f"driver=ODBC+Driver+17+for+SQL+Server"
            )
        else:
            return None
            
        return create_engine(connection_string, pool_size=5, max_overflow=10, pool_timeout=30, pool_recycle=3600)
    except Exception as e:
        print(f"خطا در ایجاد موتور SQLAlchemy: {e}")
        return None

@app.route('/')
def index():
    """صفحه ورود به سیستم"""
    if 'user_id' in session:
        return redirect(url_for('dashboard'))
    return render_template('index.html')

@app.route('/login', methods=['POST'])
def login():
    """پردازش ورود به سیستم"""
    username = request.form.get('username')
    password = request.form.get('password')
    
    # اضافه کردن لاگ برای اشکال‌زدایی
    print(f"درخواست ورود: نام کاربری={username}, رمز عبور={password}")
    
    # برای تست، مستقیماً مقادیر را بررسی می‌کنیم
    if username == 'admin' and password == 'admin':
        session['user_id'] = username
        session['user_role'] = 'admin'
        session['display_name'] = 'مدیر سیستم'
        return redirect(url_for('dashboard'))
    elif username == 'user' and password == 'user':
        session['user_id'] = username
        session['user_role'] = 'user'
        session['display_name'] = 'کاربر عادی'
        return redirect(url_for('dashboard'))
    
    # پیام خطای واضح با جزئیات بیشتر
    error_msg = f'نام کاربری یا رمز عبور اشتباه است. شما وارد کردید: {username}/{password}. لطفاً از admin/admin یا user/user استفاده کنید'
    print(f"خطای ورود: {error_msg}")
    return render_template('index.html', error=error_msg)

@app.route('/logout')
def logout():
    """خروج از سیستم"""
    session.clear()
    return redirect(url_for('index'))

@app.route('/dashboard')
def dashboard():
    """داشبورد اصلی"""
    if 'user_id' not in session:
        return redirect(url_for('index'))
    
    return render_template('dashboard.html', 
                          user=session.get('display_name'),
                          role=session.get('user_role'))

@app.route('/sales')
def sales_dashboard():
    """داشبورد فروش"""
    if 'user_id' not in session:
        return redirect(url_for('index'))
    
    return render_template('sales.html', 
                          user=session.get('display_name'),
                          role=session.get('user_role'))

@app.route('/accounting')
def accounting_dashboard():
    """داشبورد حسابداری"""
    if 'user_id' not in session:
        return redirect(url_for('index'))
    
    return render_template('accounting.html', 
                          user=session.get('display_name'),
                          role=session.get('user_role'))

@app.route('/production')
def production_dashboard():
    """داشبورد تولید"""
    if 'user_id' not in session:
        return redirect(url_for('index'))
    
    return render_template('production.html', 
                          user=session.get('display_name'),
                          role=session.get('user_role'))

@app.route('/api/mysql/tables')
def get_mysql_tables():
    """دریافت لیست جداول از دیتابیس MySQL"""
    if 'user_id' not in session:
        return jsonify({'error': 'دسترسی غیرمجاز'}), 403
    
    # داده‌های نمایشی برای تست
    tables = ['sales', 'customers', 'products', 'orders', 'order_items']
    return jsonify({'tables': tables})

@app.route('/api/sqlserver/tables')
def get_sqlserver_tables():
    """دریافت لیست جداول از دیتابیس SQL Server"""
    if 'user_id' not in session:
        return jsonify({'error': 'دسترسی غیرمجاز'}), 403
    
    # داده‌های نمایشی برای تست
    tables = ['accounts', 'transactions', 'ledger', 'journal', 'expenses']
    return jsonify({'tables': tables})

@app.route('/api/data/<db_type>/<table_name>')
@lru_cache(maxsize=50)  # کش کردن نتایج برای افزایش کارایی
def get_table_data(db_type, table_name):
    """دریافت داده‌های جدول از دیتابیس با بهینه‌سازی برای داده‌های سنگین"""
    if 'user_id' not in session:
        return jsonify({'error': 'دسترسی غیرمجاز'}), 403

    # دریافت پارامترهای صفحه‌بندی و مرتب‌سازی
    limit = request.args.get('limit', 1000, type=int)  # محدودیت تعداد رکوردها
    offset = request.args.get('offset', 0, type=int)  # آفست برای صفحه‌بندی
    order_by = request.args.get('order_by', 'id')  # فیلد مرتب‌سازی
    order_dir = request.args.get('order_dir', 'asc')  # جهت مرتب‌سازی
    filter_field = request.args.get('filter_field')  # فیلد برای فیلتر کردن
    filter_value = request.args.get('filter_value')  # مقدار فیلتر

    try:
        # تلاش برای استفاده از دیتابیس واقعی
        start_time = time.time()
        
        if db_type.lower() == 'mysql':
            engine = get_sqlalchemy_engine('mysql')
            if engine:
                # ساخت کوئری پایه
                query = f"SELECT * FROM {table_name}"
                
                # اضافه کردن شرط فیلتر در صورت وجود
                if filter_field and filter_value:
                    query += f" WHERE {filter_field} LIKE '%{filter_value}%'"
                
                # اضافه کردن مرتب‌سازی
                query += f" ORDER BY {order_by} {order_dir}"
                
                # اضافه کردن محدودیت صفحه‌بندی
                query += f" LIMIT {limit} OFFSET {offset}"
                
                # اجرای کوئری با pandas برای بهینه‌سازی
                df = pd.read_sql(text(query), engine)
                data = df.to_dict(orient='records')
                
                execution_time = time.time() - start_time
                return jsonify({
                    'data': data,
                    'meta': {
                        'total_records': len(data),
                        'execution_time_ms': round(execution_time * 1000, 2),
                        'is_mock': False
                    }
                })
                
        elif db_type.lower() == 'sqlserver':
            engine = get_sqlalchemy_engine('sqlserver')
            if engine:
                # ساخت کوئری مخصوص SQL Server
                if filter_field and filter_value:
                    where_clause = f" WHERE {filter_field} LIKE '%{filter_value}%'"
                else:
                    where_clause = ""
                
                query = f"""SELECT * FROM {table_name}{where_clause} 
                        ORDER BY {order_by} {order_dir} 
                        OFFSET {offset} ROWS FETCH NEXT {limit} ROWS ONLY"""
                
                # اجرای کوئری با pandas
                df = pd.read_sql(text(query), engine)
                data = df.to_dict(orient='records')
                
                execution_time = time.time() - start_time
                return jsonify({
                    'data': data,
                    'meta': {
                        'total_records': len(data),
                        'execution_time_ms': round(execution_time * 1000, 2),
                        'is_mock': False
                    }
                })
                
        # اگر به دیتابیس دسترسی نداشتیم، از داده‌های نمونه استفاده می‌کنیم
        print(f"استفاده از داده‌های نمونه برای {db_type}/{table_name}")
        
        # داده‌های نمایشی برای تست
        if db_type == 'mysql':
            if table_name == 'sales':
                data = [
                    {'id': 1, 'date': '1404-01-01', 'amount': 1500000, 'customer': 'شرکت الف'},
                    {'id': 2, 'date': '1404-01-02', 'amount': 2300000, 'customer': 'شرکت ب'},
                    {'id': 3, 'date': '1404-01-03', 'amount': 950000, 'customer': 'شرکت ج'}
                ]
            elif table_name == 'products':
                data = [
                    {'id': 1, 'name': 'محصول آلفا', 'price': 250000, 'stock': 120},
                    {'id': 2, 'name': 'محصول بتا', 'price': 350000, 'stock': 85},
                    {'id': 3, 'name': 'محصول گاما', 'price': 185000, 'stock': 210}
                ]
            else:
                data = [{'id': 1, 'name': 'نمونه داده تست'}]
        elif db_type == 'sqlserver':
            if table_name == 'transactions':
                data = [
                    {'id': 1, 'date': '1404-01-01', 'amount': 1700000, 'type': 'درآمد'},
                    {'id': 2, 'date': '1404-01-02', 'amount': 450000, 'type': 'هزینه'},
                    {'id': 3, 'date': '1404-01-03', 'amount': 2100000, 'type': 'درآمد'}
                ]
            else:
                data = [{'id': 1, 'name': 'نمونه داده تست'}]
        else:
            return jsonify({'error': 'نوع دیتابیس نامعتبر است'}), 400

        # اعمال فیلتر روی داده‌های نمونه
        if filter_field and filter_value:
            filtered_data = []
            for item in data:
                if filter_field in item and str(filter_value).lower() in str(item[filter_field]).lower():
                    filtered_data.append(item)
            data = filtered_data

        execution_time = time.time() - start_time
        return jsonify({
            'data': data,
            'meta': {
                'total_records': len(data),
                'execution_time_ms': round(execution_time * 1000, 2),
                'is_mock': True
            }
        })
        
    except Exception as e:
        print(f"خطا در اجرای کوئری: {e}")
        return jsonify({
            'error': 'خطا در دریافت داده‌ها',
            'message': str(e)
        }), 500

@app.route('/api/pentaho/status')
def check_pentaho_status():
    """بررسی وضعیت سرور پنتاهو"""
    if 'user_id' not in session:
        return jsonify({'error': 'دسترسی غیرمجاز'}), 403
    
    # برای تست، همیشه وضعیت آنلاین برمی‌گردانیم
    return jsonify({'status': 'online', 'message': 'سرور پنتاهو (نسخه 9.4 Community Edition) در حال اجرا است'})

@app.route('/api/pentaho/start')
def start_pentaho():
    """راه‌اندازی سرور پنتاهو"""
    if 'user_id' not in session or session['user_role'] != 'admin':
        return jsonify({'error': 'دسترسی غیرمجاز'}), 403
    
    # برای تست، همیشه پیام موفقیت‌آمیز برمی‌گردانیم
    return jsonify({'status': 'starting', 'message': 'سرور پنتاهو (9.4 CE) در حال راه‌اندازی است. لطفاً چند دقیقه صبر کنید'})

@app.route('/api/pentaho/stop')
def stop_pentaho():
    """توقف سرور پنتاهو"""
    if 'user_id' not in session or session['user_role'] != 'admin':
        return jsonify({'error': 'دسترسی غیرمجاز'}), 403
    
    # برای تست، همیشه پیام موفقیت‌آمیز برمی‌گردانیم
    return jsonify({'status': 'stopping', 'message': 'سرور پنتاهو (9.4 CE) در حال توقف است. لطفاً چند لحظه صبر کنید'})

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
